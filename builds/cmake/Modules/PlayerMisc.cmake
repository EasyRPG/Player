# ninja/parallel builds disable output colors, forcing them here. global scope to
# catch all targets. cmake will have this build into 3.24
if(CMAKE_VERSION VERSION_LESS "3.24")
	option(CMAKE_COLOR_DIAGNOSTICS "Always produce ANSI-colored output" OFF)
	if(CMAKE_COLOR_DIAGNOSTICS)
		if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
			add_compile_options("-fdiagnostics-color=always")
		elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
			add_compile_options("-fcolor-diagnostics")
		endif()
	endif()
endif()

include(GetGitRevisionDescription)
# query special files or git commands to figure out a usable version
function(player_find_gitversion)
	cmake_parse_arguments(FIND_GITVER "" "VERSION_VAR;MESSAGE_VAR" "" ${ARGN})

	# internal vars
	set(version "VERSION-NOTFOUND")
	set(message "Unknown")

	# generated by our maintainer script for release archives
	if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/builds/cmake/.git-dist)
		set(message "distribution archive")
	else()
		# git checkout or GitHub export
		# 1) try git tag
		git_get_exact_tag(GIT_TAG)
		if(GIT_TAG)
			set(message "release tag \"${GIT_TAG}\"")
		else()
			# 2) try normal checkout
			git_describe(GIT_DESCRIPTION)
			if(GIT_DESCRIPTION)
				# concatenate a version string with hash
				string(REPLACE "-" ";" GIT_DESCRIPTION ${GIT_DESCRIPTION})
				list(LENGTH GIT_DESCRIPTION GIT_DESCRIPTION_PARTS)
				if(GIT_DESCRIPTION_PARTS EQUAL 3)
					list(GET GIT_DESCRIPTION 0 GIT_TAG)
					list(GET GIT_DESCRIPTION 1 GIT_COMMITS)
					list(GET GIT_DESCRIPTION 2 GIT_HASH)
					set(message "${GIT_COMMITS} commits since tag \"${GIT_TAG}\", ")
					string(PREPEND GIT_COMMITS "+")
					string(SUBSTRING ${GIT_HASH} 1 -1 GIT_HASH) # strip the g prefix
				else()
					# no tags found, only hash (checkout without history/detached head)
					list(GET GIT_DESCRIPTION 0 GIT_HASH)
					set(message "")
				endif()
				set(version "git${GIT_COMMITS}@${GIT_HASH}")
				string(APPEND message "object hash is ${GIT_HASH}")

				# append marker for local changes
				git_local_changes(GIT_DIRTY)
				if(GIT_DIRTY STREQUAL "DIRTY")
					string(APPEND version "-dirty")
					string(APPEND message ", you have uncommitted changes")
				endif()
			else()
				# 3) no git dir, likely git archive export from GitHub
				file(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/builds/cmake/.git-hash
					GIT_HASH_STRINGS REGEX "^[A-Za-z0-9_]+$" LIMIT_COUNT 1)
				list(LENGTH GIT_HASH_STRINGS GIT_HASH_STRINGS_LENGTH)
				if(GIT_HASH_STRINGS_LENGTH EQUAL 1)
					list(GET GIT_HASH_STRINGS 0 GIT_HASH)
					set(version "git@${GIT_HASH}")
					set(message "object hash is ${GIT_HASH}")
				else()
					# 4) give up, use "undefined" values
				endif()
			endif()
		endif()
	endif()

	# export information
	if(FIND_GITVER_VERSION_VAR)
		set(${FIND_GITVER_VERSION_VAR} ${version} PARENT_SCOPE)
	endif()
	if(FIND_GITVER_MESSAGE_VAR)
		set(${FIND_GITVER_MESSAGE_VAR} ${message} PARENT_SCOPE)
	endif()
endfunction()
